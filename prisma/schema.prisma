generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id
  code              String    @unique
  name              String?
  updatedAt         DateTime  @updatedAt
  shippingCity      String?
  shippingCode      String?
  shippingCountry   String?
  shippingProvince  String?
  shippingStreet    String?
  trigger           Boolean   @default(false)
  geocodeAttempts   Int       @default(0)
  lastGeocodeAt     DateTime?
  lastGeocodeError  String?
  latitude          Float?
  longitude         Float?
  geocodeConfidence Float?
  geocodePrecision  String?
  geocodeRadius     Float?
  Invoice           Invoice[]
}

model Contact {
  id        String   @id
  code      String   @unique
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  trigger   Boolean  @default(false)
}

model Product {
  id          String        @id
  productCode String        @unique
  name        String?
  updatedAt   DateTime      @updatedAt
  InvoiceItem InvoiceItem[]
}

model Employee {
  id          String        @id
  code        String        @unique
  name        String
  userId      String?       @unique
  updatedAt   DateTime      @updatedAt
  InvoiceItem InvoiceItem[]
}

model InvoiceItemCounter {
  id     Int    @id @default(1)
  lastId String
}

model SyncJob {
  id        String     @id @default(uuid())
  module    SyncModule
  status    SyncStatus
  synced    Int?
  error     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum SyncModule {
  products
  accounts
  employees
  invoices
}

enum SyncStatus {
  queued
  processing
  success
  error
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        String    @id @default(uuid())
  zohoId    String    @unique
  subject   String?
  date      DateTime?
  // Link to existing Account model (Zoho Account ID stored in Account.id)
  accountId String?
  account   Account?  @relation(fields: [accountId], references: [id], onDelete: SetNull)

  subtotal    Decimal?      @db.Decimal(18, 6)
  discount    Decimal?      @db.Decimal(18, 6)
  tax         Decimal?      @db.Decimal(18, 6)
  grandTotal  Decimal?      @db.Decimal(18, 6)
  currency    String?
  status      String?
  contentHash String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       InvoiceItem[]
}

model InvoiceItem {
  id        String  @id @default(uuid())
  zohoRowId String  @unique
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  productId   String?
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productName String?

  quantity  Decimal? @db.Decimal(18, 6)
  listPrice Decimal? @db.Decimal(18, 6)
  discount  Decimal? @db.Decimal(18, 6)
  tax       Decimal? @db.Decimal(18, 6)
  amount    Decimal? @db.Decimal(18, 6)
  total     Decimal? @db.Decimal(18, 6)

  employeeId     String?
  employee       Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeZohoId String?

  contentHash String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([invoiceId])
  @@index([employeeId])
  @@index([employeeZohoId])
}
