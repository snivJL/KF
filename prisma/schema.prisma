generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id
  code              String    @unique
  name              String?
  updatedAt         DateTime  @updatedAt
  shippingCity      String?
  shippingCode      String?
  shippingCountry   String?
  shippingProvince  String?
  shippingStreet    String?
  trigger           Boolean   @default(false)
  geocodeAttempts   Int       @default(0)
  lastGeocodeAt     DateTime?
  lastGeocodeError  String?
  latitude          Float?
  longitude         Float?
  geocodeConfidence Float?
  geocodePrecision  String?
  geocodeRadius     Float?
}

model Contact {
  id        String   @id
  code      String   @unique
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  trigger   Boolean  @default(false)
}

model Product {
  id          String   @id
  productCode String   @unique
  name        String?
  updatedAt   DateTime @updatedAt
}

model Employee {
  id        String   @id
  code      String   @unique
  name      String
  userId    String?  @unique
  updatedAt DateTime @updatedAt
}

model InvoiceItemCounter {
  id     Int    @id @default(1)
  lastId String
}

model SyncJob {
  id        String     @id @default(uuid())
  module    SyncModule
  status    SyncStatus
  synced    Int?
  error     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum SyncModule {
  products
  accounts
  employees
  invoices
}

enum SyncStatus {
  queued
  processing
  success
  error
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  description String? // optional
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  questions Question[]
  responses Response[]
}

model Question {
  id       String       @id @default(uuid())
  survey   Survey       @relation(fields: [surveyId], references: [id])
  surveyId String
  order    Int // 1,2,3,...
  label    String
  type     QuestionType
  options  String[] // only used if type = “multiple_choice” (array of choice labels)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  TEXT
  TEXTAREA
  RATING // e.g. 1–5 stars or 1–10 scale
  SINGLE_CHOICE // Exactly one selectable option (radio buttons)
  MULTIPLE_CHOICE // One or more selectable options (checkboxes)
  DROPDOWN
  CHECKBOX
  BOOLEAN
  NUMBER
  EMAIL
  DATE
  TIME
  SCALE // Custom scale (e.g. 1–7)
}

model Response {
  id          String   @id @default(uuid())
  survey      Survey   @relation(fields: [surveyId], references: [id])
  surveyId    String
  submittedAt DateTime @default(now())
  answers     Json // e.g. { "q1-id": "Some text", "q2-id": 5, "q3-id": "Option A" }
}
